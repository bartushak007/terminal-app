{"version":3,"sources":["components/Terminal/terminal.module.css","helpers.js","reducers/terminalReducer.js","customHooks/useTerminal.js","components/Terminal/index.js","components/Terminal/Terminal.jsx","App.js","serviceWorker.js","store/rootReducer.js","store/rootSaga.js","store/index.js","index.js"],"names":["module","exports","renderExpensesString","i","date","title","currency","amount","getCurrenciesSaga","updateHistoryByKeySaga","updateHistorySaga","getTotalSaga","saga","updateHistory","createAction","getCurrencies","setCurrencies","setSuccess","updateExpenses","clearExpenses","getTotal","handleActions","state","payload","history","load","currencies","rates","baseValute","base","expenses","clearedExpensesEntries","Object","entries","filter","key","moment","format","fromEntries","historySelector","loadingSelector","currenciesSelector","expensesSelector","ratesSelector","call","fetch","response","json","put","keys","text","error","select","data","expensesByDate","delay","map","join","values","expensesArray","splitedMoneyByCurrency","reduce","accArr","expensesInner","amountsObject","upperCaseCurrency","toUpperCase","totalInBaseValute","sum","total","all","takeEvery","useTerminal","dispatch","useDispatch","useState","terminalInput","setTerminalInput","useEffect","useSelector","isLoading","setHistory","onChangeHandler","value","target","submitHandler","e","preventDefault","commandsList","split","hasError","toLowerCase","evailableCommands","some","isValid","test","includes","err","checkIsCommandFull","dispatchUpdateExpenses","setTimeout","isCommand","fillInputFromHistory","onlyCommands","keyCode","length","Terminal","className","styles","loader","errorInCommand","successCommand","onKeyDown","onSubmit","commandLineForm","commandLine","type","onChange","App","Boolean","window","location","hostname","match","combineReducers","terminal","terminalReducer","rootSaga","termianalSaga","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7e647f84.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"history\":\"terminal_history__31w77\",\"commandLineForm\":\"terminal_commandLineForm__2BWgp\",\"commandLine\":\"terminal_commandLine__2mL9g\",\"errorInCommand\":\"terminal_errorInCommand__vksEP\",\"successCommand\":\"terminal_successCommand__3gtSo\",\"isLoading\":\"terminal_isLoading__SvL-A\",\"loader\":\"terminal_loader__EAEuj\",\"rotating\":\"terminal_rotating__LAXfc\"};","import moment from \"moment\";\r\n\r\nexport const checkIsCommandFull = (\r\n  commandsList,\r\n  evailableCommands,\r\n  currencies\r\n) => {\r\n  try {\r\n    return !!(\r\n      (evailableCommands.some((e) => e === commandsList[0].toLowerCase())) && // does command exist\r\n      moment(commandsList[1].toLowerCase()).isValid() && // moment\r\n      /^[\\d]*[.]?[\\d]*$/.test(commandsList[2].toLowerCase()) && // number\r\n      currencies.includes(commandsList[3].toUpperCase()) && // currency\r\n      commandsList[4].toLowerCase()\r\n    ); // not empty\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const renderExpensesString = ({ date, title, currency, amount }, i) =>\r\n  `${!i ? `${date}\\n ` : \"\"}${amount} ${currency} ${title}\\n`;\r\n","import { handleActions, createAction } from \"redux-actions\";\r\nimport { all, call, put, takeEvery, select, delay } from \"redux-saga/effects\";\r\nimport { renderExpensesString } from \"../helpers\";\r\nimport moment from \"moment\";\r\n\r\nconst REDUCER_NAME = \"terminal\";\r\n\r\nconst UPDATE_HISTORY = \"UPDATE_HISTORY\";\r\nconst GET_CURRENCIES = \"GET_CURRENCIES\";\r\nconst SET_CURRENCIES = \"SET_CURRENCIES\";\r\nconst SET_SUCCESS = \"SET_SUCCESS\";\r\nconst UPDATE_EXPENSES = \"UPDATE_EXPENSES\";\r\nconst CLEAR_EXPENSES = \"CLEAR_EXPENSES\";\r\nconst GET_TOTAL = \"GET_TOTAL\";\r\n\r\nexport const updateHistory = createAction(UPDATE_HISTORY);\r\nexport const getCurrencies = createAction(GET_CURRENCIES);\r\nexport const setCurrencies = createAction(SET_CURRENCIES);\r\nexport const setSuccess = createAction(SET_SUCCESS);\r\nexport const updateExpenses = createAction(UPDATE_EXPENSES);\r\nexport const clearExpenses = createAction(CLEAR_EXPENSES);\r\nexport const getTotal = createAction(GET_TOTAL);\r\n\r\nconst initialState = {\r\n  history: [],\r\n  currencies: [],\r\n  rates: [],\r\n  baseValute: \"EUR\",\r\n  load: false,\r\n  expenses: {},\r\n};\r\n\r\nexport default handleActions(\r\n  {\r\n    [updateHistory]: (state, { payload }) => ({\r\n      ...state,\r\n      history: [...state.history, payload],\r\n    }),\r\n    [getCurrencies]: (state) => ({\r\n      ...state,\r\n      load: true,\r\n    }),\r\n    [setCurrencies]: (state, { payload }) => ({\r\n      ...state,\r\n      currencies: payload.currencies,\r\n      rates: payload.rates,\r\n      baseValute: payload.base,\r\n    }),\r\n    [setSuccess]: (state) => ({\r\n      ...state,\r\n      load: false,\r\n    }),\r\n    [updateExpenses]: (state, { payload }) => {\r\n      return {\r\n        ...state,\r\n        expenses: {\r\n          ...state.expenses,\r\n          [payload.date]: [...(state.expenses[payload.date] || []), payload],\r\n        },\r\n      };\r\n    },\r\n    [clearExpenses]: (state, { payload }) => {\r\n      const clearedExpensesEntries = Object.entries(state.expenses).filter(\r\n        ([key]) =>\r\n          moment(key).format(\"YYYY-MM-DD\") !==\r\n          moment(payload).format(\"YYYY-MM-DD\")\r\n      );\r\n\r\n      return {\r\n        ...state,\r\n        expenses: Object.fromEntries(clearedExpensesEntries),\r\n      };\r\n    },\r\n    [getTotal]: (state) => ({\r\n      ...state,\r\n    }),\r\n  },\r\n  initialState\r\n);\r\n\r\nexport const historySelector = (state) => state[REDUCER_NAME].history;\r\nexport const loadingSelector = (state) => state[REDUCER_NAME].load;\r\nexport const currenciesSelector = (state) => state[REDUCER_NAME].currencies;\r\nexport const expensesSelector = (state) => state[REDUCER_NAME].expenses;\r\nexport const ratesSelector = (state) => state[REDUCER_NAME].rates;\r\n\r\nfunction* getCurrenciesSaga() {\r\n  try {\r\n    const response = yield call(\r\n      fetch,\r\n      \"http://data.fixer.io/api/latest?access_key=f0ba8e209927e01e8bfa04b63dbf37fc&format=1\"\r\n    );\r\n    const { rates, base } = yield response.json();\r\n\r\n    yield put(setCurrencies({ currencies: Object.keys(rates), rates, base }));\r\n  } catch (e) {\r\n    yield put(\r\n      updateHistory({\r\n        text: \"fetch error http://data.fixer.io/api/latest\",\r\n        error: true,\r\n      })\r\n    );\r\n  }\r\n  yield put(setSuccess());\r\n}\r\n\r\nfunction* updateHistoryByKeySaga({ payload: { date, title } }) {\r\n  const data = yield select(expensesSelector);\r\n  const expensesByDate = data[date];\r\n\r\n  yield delay(0);\r\n  yield put(\r\n    updateHistory({\r\n      text: expensesByDate.map(renderExpensesString).join(\" \"),\r\n    })\r\n  );\r\n}\r\n\r\nfunction* updateHistorySaga() {\r\n  const expenses = yield select(expensesSelector);\r\n\r\n  yield delay(0);\r\n  yield put(\r\n    updateHistory({\r\n      text: Object.values(expenses)\r\n        .map((expenses) => expenses.map(renderExpensesString).join(\" \"))\r\n        .join(\" \"),\r\n    })\r\n  );\r\n}\r\n\r\nfunction* getTotalSaga({ payload }) {\r\n  const expenses = yield select(expensesSelector);\r\n  const rates = yield select(ratesSelector);\r\n  const expensesArray = Object.values(expenses);\r\n\r\n  const splitedMoneyByCurrency = expensesArray\r\n    .reduce((accArr, expensesInner) => [...accArr, ...expensesInner], [])\r\n    .reduce((amountsObject, { amount, currency }) => {\r\n      const upperCaseCurrency = currency.toUpperCase();\r\n      return {\r\n        ...amountsObject,\r\n        [upperCaseCurrency]: +(amountsObject[upperCaseCurrency] || 0) + +amount,\r\n      };\r\n    }, {});\r\n\r\n  const totalInBaseValute = Object.entries(splitedMoneyByCurrency).reduce(\r\n    (sum, [key, amount]) => sum + amount / rates[key],\r\n    0\r\n  );\r\n\r\n  const total = totalInBaseValute * rates[payload];\r\n\r\n  yield delay(0);\r\n  yield put(\r\n    updateHistory({\r\n      text: `Total ${total} ${payload}`,\r\n    })\r\n  );\r\n\r\n  // to expensive feature :)\r\n  // const promisesArr = Object.entries(\r\n  //   splitedMoneyByCurrency\r\n  // ).map(([key, amount]) =>\r\n  //   fetch(\r\n  //     `http://data.fixer.io/api/convert?access_key=f0ba8e209927e01e8bfa04b63dbf37fc&from=${key}&to=${payload}&amount=${amount}`\r\n  //   ).then((res) => res.json())\r\n  // );\r\n}\r\n\r\nexport function* saga() {\r\n  yield all([\r\n    takeEvery(GET_CURRENCIES, getCurrenciesSaga),\r\n    takeEvery(UPDATE_EXPENSES, updateHistoryByKeySaga),\r\n    takeEvery(CLEAR_EXPENSES, updateHistorySaga),\r\n    takeEvery(GET_TOTAL, getTotalSaga),\r\n  ]);\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport { checkIsCommandFull, renderExpensesString } from \"../helpers\";\r\nimport {\r\n  historySelector,\r\n  updateHistory,\r\n  getCurrencies,\r\n  loadingSelector,\r\n  currenciesSelector,\r\n  updateExpenses,\r\n  expensesSelector,\r\n  clearExpenses,\r\n  getTotal,\r\n} from \"../reducers/terminalReducer\";\r\n\r\nconst useTerminal = () => {\r\n  const dispatch = useDispatch();\r\n  const [terminalInput, setTerminalInput] = useState(\"\");\r\n\r\n  function getCurrenciesEffect() {\r\n    dispatch(getCurrencies());\r\n  }\r\n  useEffect(getCurrenciesEffect, []);\r\n\r\n  const history = useSelector(historySelector);\r\n  const isLoading = useSelector(loadingSelector);\r\n  const currencies = useSelector(currenciesSelector);\r\n  const expenses = useSelector(expensesSelector);\r\n\r\n  const setHistory = (payload) => dispatch(updateHistory(payload));\r\n\r\n  const onChangeHandler = ({ target: { value } }) => setTerminalInput(value);\r\n\r\n  const dispatchUpdateExpenses = ([_, date, amount, currency, ...title]) => {\r\n    dispatch(\r\n      updateExpenses({\r\n        date: moment(date).format(\"YYYY-MM-DD\"),\r\n        amount,\r\n        currency,\r\n        title: title.join(\" \"),\r\n      })\r\n    );\r\n  };\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    const commandsList = terminalInput.split(\" \");\r\n    let hasError = false;\r\n\r\n    switch (commandsList[0].toLowerCase()) {\r\n      case \"add\": {\r\n        hasError = !checkIsCommandFull(\r\n          commandsList,\r\n          [\"add\", \"list\"],\r\n          currencies\r\n        );\r\n        !hasError && dispatchUpdateExpenses(commandsList);\r\n        break;\r\n      }\r\n      case \"list\": {\r\n        setTimeout(\r\n          () =>\r\n            setHistory({\r\n              text: Object.values(expenses)\r\n                .map((expenses) => expenses.map(renderExpensesString).join(\" \"))\r\n                .join(\" \"),\r\n            }),\r\n          0\r\n        );\r\n\r\n        break;\r\n      }\r\n\r\n      case \"clear\": {\r\n        if (\r\n          expenses[moment(commandsList[1].toLowerCase()).format(\"YYYY-MM-DD\")]\r\n        ) {\r\n          dispatch(clearExpenses(commandsList[1].toLowerCase()));\r\n        } else {\r\n          hasError = true;\r\n        }\r\n        break;\r\n      }\r\n\r\n      case \"total\": {\r\n        if (currencies.includes(commandsList[1].toUpperCase())) {\r\n          dispatch(getTotal(commandsList[1].toUpperCase()));\r\n        } else {\r\n          hasError = true;\r\n        }\r\n        break;\r\n      }\r\n\r\n      default:\r\n        hasError = true;\r\n    }\r\n    setHistory({ text: terminalInput, isCommand: true, hasError });\r\n    setTerminalInput(\"\");\r\n  };\r\n\r\n  const fillInputFromHistory = (e) => {\r\n    const onlyCommands = history.filter(\r\n      ({ isCommand, hasError }) => isCommand && !hasError\r\n    );\r\n\r\n    if (e.keyCode === 38 && onlyCommands.length) {\r\n      onlyCommands[onlyCommands.length - 1] &&\r\n        setTerminalInput(onlyCommands[onlyCommands.length - 1].text);\r\n    }\r\n  };\r\n\r\n  return {\r\n    setHistory,\r\n    onChangeHandler,\r\n    submitHandler,\r\n    fillInputFromHistory,\r\n    terminalInput,\r\n    setTerminalInput,\r\n    history,\r\n    isLoading,\r\n    currencies,\r\n  };\r\n};\r\n\r\nexport default useTerminal;\r\n","import Terminal from './Terminal';\r\n\r\nexport default Terminal;","import React from \"react\";\r\n// import PropTypes from \"prop-types\";\r\n\r\nimport styles from \"./terminal.module.css\";\r\nimport useTerminal from \"../../customHooks/useTerminal\";\r\n\r\nconst Terminal = () => {\r\n  const {\r\n    onChangeHandler,\r\n    submitHandler,\r\n    fillInputFromHistory,\r\n    terminalInput,\r\n    history,\r\n    isLoading,\r\n  } = useTerminal();\r\n\r\n  return (\r\n    <>\r\n      <div className={`${styles.history} ${isLoading ? styles.isLoading : ''}`}>\r\n        <div className={styles.loader}/>\r\n        {history.map(({ text, isCommand, hasError }, i) => (\r\n          <pre\r\n            className={\r\n              hasError\r\n                ? styles.errorInCommand\r\n                : !hasError && isCommand\r\n                ? styles.successCommand\r\n                : \"\"\r\n            }\r\n            key={i}\r\n          >\r\n            {isCommand ? \"> \" : \" \"}\r\n            {text}\r\n          </pre>\r\n        ))}\r\n        <form\r\n          onKeyDown={fillInputFromHistory}\r\n          onSubmit={submitHandler}\r\n          className={styles.commandLineForm}\r\n        >\r\n          $\r\n          <input\r\n            className={styles.commandLine}\r\n            type=\"text\"\r\n            value={terminalInput}\r\n            onChange={onChangeHandler}\r\n          />\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n// Terminal.propTypes = {\r\n//   history: PropTypes.arrayOf(\r\n//     PropTypes.shape({\r\n//       text: PropTypes.string.isRequired,\r\n//       hasError: PropTypes.boolean,\r\n//       isCommand: PropTypes.boolean,\r\n//     })\r\n//   ).isRequired,\r\n//   submitHandler: PropTypes.func,\r\n//   terminalInput: PropTypes.string,\r\n//   onChangeHandler: PropTypes.func,\r\n//   fillInputFromHistory: PropTypes.func,\r\n// };\r\n\r\nexport default Terminal;\r\n","import React from \"react\";\n\nimport Terminal from \"./components/Terminal\";\n\nfunction App() {\n  return (\n    <div className=\"App relative fullscreenHeight\">\n      <Terminal />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\r\n\r\nimport terminalReducer from '../reducers/terminalReducer';\r\n\r\nexport default combineReducers({\r\n  terminal: terminalReducer,  \r\n});","import { all } from \"redux-saga/effects\";\r\nimport { saga as termianalSaga } from \"../reducers/terminalReducer\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([termianalSaga()]);\r\n}\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootReducer from \"./rootReducer\";\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = createStore(rootReducer, {}, applyMiddleware(sagaMiddleware));\r\n\r\n// store.subscribe(() => console.log(store.getState()));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}